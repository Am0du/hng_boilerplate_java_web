name: CI

on:
  push:
    branches: [dev, staging, main]
  pull_request:
    branches: [dev, staging, main]
  pull_request_target:
    branches: [dev, staging, main]

jobs:
  build-test-and-integrate:
    runs-on: ubuntu-latest
    
    services:
      postgres:  
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: ${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_DEFAULT_PASS: ${{ secrets.RABBITMQ_PASSWORD }}
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      - name: Create .env file
        run: |
          echo "DB_CONNECTION_STRING=postgresql://localhost:${{ secrets.POSTGRES_PORT }}/${{ secrets.POSTGRES_DB }}" >> .env
          echo "DB_USERNAME=${{ secrets.POSTGRES_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "RABBITMQ_HOST=localhost" >> .env
          echo "RABBITMQ_PORT=${{ secrets.RABBITMQ_PORT }}" >> .env
          echo "RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }}" >> .env
          echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
          echo "QUEUE_EMAIL=emailQueue" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "EXCHANGE_KEY=${{ secrets.EXCHANGE_KEY }}" >> .env
          echo "ROUTING_KEY=${{ secrets.ROUTING_KEY }}" >> .env
          echo "ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }}" >> .env
          echo "AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }}" >> .env
          echo "SMS_NUMBER=${{ secrets.OUTGOING_SMS_NUMBER }}" >> .env

      - name: Create application.properties
        run: |
          mkdir -p src/main/resources
          source .env
          cat << EOF > src/main/resources/application.properties
          spring.application.name=hng-java-boilerplate
          spring.datasource.url=jdbc:${DB_CONNECTION_STRING}
          spring.datasource.username=${DB_USERNAME}
          spring.datasource.password=${DB_PASSWORD}
          spring.jpa.hibernate.ddl-auto=validate
          spring.flyway.enabled=true
          spring.flyway.baseline-on-migrate=true
          spring.flyway.location=classpath:db/migration
          spring.flyway.url=jdbc:${DB_CONNECTION_STRING}
          spring.flyway.user=${DB_USERNAME}
          spring.flyway.password=${DB_PASSWORD}
          spring.flyway.baseline-version=1
          spring.datasource.hikari.minimum-idle=5
          spring.datasource.hikari.maximum-pool-size=20
          spring.datasource.hikari.idle-timeout=30000
          spring.datasource.hikari.pool-name=HikariCP
          spring.datasource.hikari.max-lifetime=1800000
          spring.datasource.hikari.connection-timeout=20000
          spring.datasource.hikari.leak-detection-threshold=15000
          spring.mvc.throw-exception-if-no-handler-found=true
          spring.web.resources.add-mappings=false
          spring.main.banner-mode=off
          logging.pattern.console=%green(%d{HH:mm:ss.SSS}) %blue(%-5level) %red([%thread]) %yellow(%logger{15})- %msg%n
          springdoc.swagger-ui.path=/docs
          springdoc.api-docs.servers[0].url=https://api-java.boilerplate.hng.tech
          springdoc.api-docs.servers[0].description=Production Server
          springdoc.api-docs.servers[1].url=https://staging.api-java.boilerplate.hng.tech
          springdoc.api-docs.servers[1].description=Staging Server
          springdoc.api-docs.servers[2].url=https://deployment.api-java.boilerplate.hng.tech
          springdoc.api-docs.servers[2].description=Deployment Server
          spring.rabbitmq.host=${RABBITMQ_HOST}
          spring.rabbitmq.port=${RABBITMQ_PORT}
          spring.rabbitmq.username=${RABBITMQ_USERNAME}
          spring.rabbitmq.password=${RABBITMQ_PASSWORD}
          rabbitmq.queue.email=${QUEUE_EMAIL}
          spring.rabbitmq.exchange.key=${EXCHANGE_KEY}
          spring.rabbitmq.routing.key=${ROUTING_KEY}
          spring.twilio.account.sid=${ACCOUNT_SID}
          spring.twilio.auth.token=${AUTH_TOKEN}
          spring.twilio.outgoing.sms.number=${SMS_NUMBER}
          spring.mail.host=smtp.gmail.com
          sha512.string=${JWT_SECRET}
          EOF

      - name: Download Dependencies
        run: mvn dependency:resolve

      - name: Build and Run Unit Tests
        run: mvn clean test

      - name: Build for Integration Tests
        run: mvn clean package -DskipTests

      - name: Start Application
        run: nohup java -jar target/hng-java-boilerplate-0.0.1-SNAPSHOT.jar &

      - name: Wait for Application to be Ready
        run: sleep 30

      - name: Run Integration Tests
        run: mvn verify -DskipUnitTests

      - name: Archive Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with: 
          name: test-results
          path: target/surefire-reports/*.xml

      - name: Archive Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-jar
          path: target/*.jar
